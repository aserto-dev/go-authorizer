// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: aserto/authorizer/v2/authorizer.proto

package authorizer

import (
	v1 "github.com/aserto-dev/go-grpc/aserto/api/v1"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PathSeparator int32

const (
	PathSeparator_PATH_SEPARATOR_UNKNOWN PathSeparator = 0 // Value not set.
	PathSeparator_PATH_SEPARATOR_DOT     PathSeparator = 1 // Dot "." path separator
	PathSeparator_PATH_SEPARATOR_SLASH   PathSeparator = 2 // Slash "/" path separtor
)

// Enum value maps for PathSeparator.
var (
	PathSeparator_name = map[int32]string{
		0: "PATH_SEPARATOR_UNKNOWN",
		1: "PATH_SEPARATOR_DOT",
		2: "PATH_SEPARATOR_SLASH",
	}
	PathSeparator_value = map[string]int32{
		"PATH_SEPARATOR_UNKNOWN": 0,
		"PATH_SEPARATOR_DOT":     1,
		"PATH_SEPARATOR_SLASH":   2,
	}
)

func (x PathSeparator) Enum() *PathSeparator {
	p := new(PathSeparator)
	*p = x
	return p
}

func (x PathSeparator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PathSeparator) Descriptor() protoreflect.EnumDescriptor {
	return file_aserto_authorizer_v2_authorizer_proto_enumTypes[0].Descriptor()
}

func (PathSeparator) Type() protoreflect.EnumType {
	return &file_aserto_authorizer_v2_authorizer_proto_enumTypes[0]
}

func (x PathSeparator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PathSeparator.Descriptor instead.
func (PathSeparator) EnumDescriptor() ([]byte, []int) {
	return file_aserto_authorizer_v2_authorizer_proto_rawDescGZIP(), []int{0}
}

type TraceLevel int32

const (
	TraceLevel_TRACE_LEVEL_UNKNOWN TraceLevel = 0 // Value not set.
	TraceLevel_TRACE_LEVEL_OFF     TraceLevel = 1 // ExplainOffV1   ExplainModeV1 = "off"
	TraceLevel_TRACE_LEVEL_FULL    TraceLevel = 2 // ExplainFullV1  ExplainModeV1 = "full"
	TraceLevel_TRACE_LEVEL_NOTES   TraceLevel = 3 // ExplainNotesV1 ExplainModeV1 = "notes"
	TraceLevel_TRACE_LEVEL_FAILS   TraceLevel = 4 // ExplainFailsV1 ExplainModeV1 = "fails"
)

// Enum value maps for TraceLevel.
var (
	TraceLevel_name = map[int32]string{
		0: "TRACE_LEVEL_UNKNOWN",
		1: "TRACE_LEVEL_OFF",
		2: "TRACE_LEVEL_FULL",
		3: "TRACE_LEVEL_NOTES",
		4: "TRACE_LEVEL_FAILS",
	}
	TraceLevel_value = map[string]int32{
		"TRACE_LEVEL_UNKNOWN": 0,
		"TRACE_LEVEL_OFF":     1,
		"TRACE_LEVEL_FULL":    2,
		"TRACE_LEVEL_NOTES":   3,
		"TRACE_LEVEL_FAILS":   4,
	}
)

func (x TraceLevel) Enum() *TraceLevel {
	p := new(TraceLevel)
	*p = x
	return p
}

func (x TraceLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TraceLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_aserto_authorizer_v2_authorizer_proto_enumTypes[1].Descriptor()
}

func (TraceLevel) Type() protoreflect.EnumType {
	return &file_aserto_authorizer_v2_authorizer_proto_enumTypes[1]
}

func (x TraceLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TraceLevel.Descriptor instead.
func (TraceLevel) EnumDescriptor() ([]byte, []int) {
	return file_aserto_authorizer_v2_authorizer_proto_rawDescGZIP(), []int{1}
}

type DecisionTreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyContext   *v1.PolicyContext    `protobuf:"bytes,1,opt,name=policy_context,json=policyContext,proto3" json:"policy_context,omitempty"`
	IdentityContext *v1.IdentityContext  `protobuf:"bytes,2,opt,name=identity_context,json=identityContext,proto3" json:"identity_context,omitempty"`
	Options         *DecisionTreeOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	ResourceContext *structpb.Struct     `protobuf:"bytes,4,opt,name=resource_context,json=resourceContext,proto3" json:"resource_context,omitempty"`
}

func (x *DecisionTreeRequest) Reset() {
	*x = DecisionTreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_authorizer_v2_authorizer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecisionTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionTreeRequest) ProtoMessage() {}

func (x *DecisionTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_authorizer_v2_authorizer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionTreeRequest.ProtoReflect.Descriptor instead.
func (*DecisionTreeRequest) Descriptor() ([]byte, []int) {
	return file_aserto_authorizer_v2_authorizer_proto_rawDescGZIP(), []int{0}
}

func (x *DecisionTreeRequest) GetPolicyContext() *v1.PolicyContext {
	if x != nil {
		return x.PolicyContext
	}
	return nil
}

func (x *DecisionTreeRequest) GetIdentityContext() *v1.IdentityContext {
	if x != nil {
		return x.IdentityContext
	}
	return nil
}

func (x *DecisionTreeRequest) GetOptions() *DecisionTreeOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *DecisionTreeRequest) GetResourceContext() *structpb.Struct {
	if x != nil {
		return x.ResourceContext
	}
	return nil
}

type DecisionTreeOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathSeparator PathSeparator `protobuf:"varint,1,opt,name=path_separator,json=pathSeparator,proto3,enum=aserto.authorizer.v2.PathSeparator" json:"path_separator,omitempty"`
}

func (x *DecisionTreeOptions) Reset() {
	*x = DecisionTreeOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_authorizer_v2_authorizer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecisionTreeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionTreeOptions) ProtoMessage() {}

func (x *DecisionTreeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_authorizer_v2_authorizer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionTreeOptions.ProtoReflect.Descriptor instead.
func (*DecisionTreeOptions) Descriptor() ([]byte, []int) {
	return file_aserto_authorizer_v2_authorizer_proto_rawDescGZIP(), []int{1}
}

func (x *DecisionTreeOptions) GetPathSeparator() PathSeparator {
	if x != nil {
		return x.PathSeparator
	}
	return PathSeparator_PATH_SEPARATOR_UNKNOWN
}

type DecisionTreeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathRoot string           `protobuf:"bytes,1,opt,name=path_root,json=pathRoot,proto3" json:"path_root,omitempty"`
	Path     *structpb.Struct `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *DecisionTreeResponse) Reset() {
	*x = DecisionTreeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_authorizer_v2_authorizer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecisionTreeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionTreeResponse) ProtoMessage() {}

func (x *DecisionTreeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_authorizer_v2_authorizer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionTreeResponse.ProtoReflect.Descriptor instead.
func (*DecisionTreeResponse) Descriptor() ([]byte, []int) {
	return file_aserto_authorizer_v2_authorizer_proto_rawDescGZIP(), []int{2}
}

func (x *DecisionTreeResponse) GetPathRoot() string {
	if x != nil {
		return x.PathRoot
	}
	return ""
}

func (x *DecisionTreeResponse) GetPath() *structpb.Struct {
	if x != nil {
		return x.Path
	}
	return nil
}

type IsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyContext   *v1.PolicyContext   `protobuf:"bytes,1,opt,name=policy_context,json=policyContext,proto3" json:"policy_context,omitempty"`
	IdentityContext *v1.IdentityContext `protobuf:"bytes,2,opt,name=identity_context,json=identityContext,proto3" json:"identity_context,omitempty"`
	ResourceContext *structpb.Struct    `protobuf:"bytes,3,opt,name=resource_context,json=resourceContext,proto3" json:"resource_context,omitempty"`
}

func (x *IsRequest) Reset() {
	*x = IsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_authorizer_v2_authorizer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsRequest) ProtoMessage() {}

func (x *IsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_authorizer_v2_authorizer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsRequest.ProtoReflect.Descriptor instead.
func (*IsRequest) Descriptor() ([]byte, []int) {
	return file_aserto_authorizer_v2_authorizer_proto_rawDescGZIP(), []int{3}
}

func (x *IsRequest) GetPolicyContext() *v1.PolicyContext {
	if x != nil {
		return x.PolicyContext
	}
	return nil
}

func (x *IsRequest) GetIdentityContext() *v1.IdentityContext {
	if x != nil {
		return x.IdentityContext
	}
	return nil
}

func (x *IsRequest) GetResourceContext() *structpb.Struct {
	if x != nil {
		return x.ResourceContext
	}
	return nil
}

type Decision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Decision string `protobuf:"bytes,1,opt,name=decision,proto3" json:"decision,omitempty"`
	Is       bool   `protobuf:"varint,2,opt,name=is,proto3" json:"is,omitempty"`
}

func (x *Decision) Reset() {
	*x = Decision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_authorizer_v2_authorizer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decision) ProtoMessage() {}

func (x *Decision) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_authorizer_v2_authorizer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decision.ProtoReflect.Descriptor instead.
func (*Decision) Descriptor() ([]byte, []int) {
	return file_aserto_authorizer_v2_authorizer_proto_rawDescGZIP(), []int{4}
}

func (x *Decision) GetDecision() string {
	if x != nil {
		return x.Decision
	}
	return ""
}

func (x *Decision) GetIs() bool {
	if x != nil {
		return x.Is
	}
	return false
}

type IsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Decisions []*Decision `protobuf:"bytes,1,rep,name=decisions,proto3" json:"decisions,omitempty"`
}

func (x *IsResponse) Reset() {
	*x = IsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_authorizer_v2_authorizer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsResponse) ProtoMessage() {}

func (x *IsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_authorizer_v2_authorizer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsResponse.ProtoReflect.Descriptor instead.
func (*IsResponse) Descriptor() ([]byte, []int) {
	return file_aserto_authorizer_v2_authorizer_proto_rawDescGZIP(), []int{5}
}

func (x *IsResponse) GetDecisions() []*Decision {
	if x != nil {
		return x.Decisions
	}
	return nil
}

var File_aserto_authorizer_v2_authorizer_proto protoreflect.FileDescriptor

var file_aserto_authorizer_v2_authorizer_proto_rawDesc = []byte{
	0x0a, 0x25, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x61, 0x73, 0x65, 0x72, 0x74,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x61,
	0x73, 0x65, 0x72, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xae, 0x02, 0x0a, 0x13, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x49, 0x0a, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x73, 0x65,
	0x72, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x42, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x67, 0x0a, 0x13, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x65, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x53,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x53, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x66, 0x0a,
	0x14, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x4a,
	0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xdf, 0x01, 0x0a, 0x09, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x73,
	0x65, 0x72, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x49, 0x0a, 0x10, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x42, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x36, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x69, 0x73, 0x22,
	0x4a, 0x0a, 0x0a, 0x49, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x5d, 0x0a, 0x0d, 0x50,
	0x61, 0x74, 0x68, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x41, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x41, 0x54, 0x48,
	0x5f, 0x53, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x4f, 0x54, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x10, 0x02, 0x2a, 0x7e, 0x0a, 0x0a, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x43,
	0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x45,
	0x53, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x53, 0x10, 0x04, 0x32, 0xce, 0x04, 0x0a, 0x0a, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x9f, 0x02, 0x0a, 0x0c, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x73, 0x65,
	0x72, 0x74, 0x6f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xb7, 0x01, 0x92, 0x41, 0x8e, 0x01, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x72, 0x12, 0x0d, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74,
	0x72, 0x65, 0x65, 0x1a, 0x31, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x72, 0x65, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67,
	0x69, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x2a, 0x18, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x72, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x65,
	0x62, 0x24, 0x0a, 0x14, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x00, 0x0a, 0x0c, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x74, 0x72, 0x65, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x9d, 0x02, 0x0a, 0x02,
	0x49, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd3, 0x01, 0x92, 0x41, 0xb4, 0x01, 0x0a, 0x0a, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x0f, 0x49, 0x73, 0x20, 0x28, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x29, 0x1a, 0x60, 0x44, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69,
	0x76, 0x65, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x2a, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x62, 0x24, 0x0a, 0x14, 0x0a, 0x10,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79,
	0x12, 0x00, 0x0a, 0x0c, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x69, 0x73, 0x3a, 0x01, 0x2a, 0x42, 0xfc, 0x01, 0x5a, 0x43,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x73, 0x65, 0x72, 0x74,
	0x6f, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x67, 0x6f, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x72, 0x2f, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x3b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x72, 0xaa, 0x02, 0x14, 0x41, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x2e, 0x56, 0x32, 0x92, 0x41, 0x9c, 0x01, 0x2a, 0x01,
	0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x4d, 0x0a, 0x27, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x72, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x13, 0x08, 0x02, 0x1a,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02,
	0x0a, 0x22, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x08, 0x02,
	0x1a, 0x10, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2d, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d,
	0x69, 0x64, 0x20, 0x02, 0x62, 0x24, 0x0a, 0x14, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x72, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x00, 0x0a, 0x0c, 0x0a, 0x08,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_aserto_authorizer_v2_authorizer_proto_rawDescOnce sync.Once
	file_aserto_authorizer_v2_authorizer_proto_rawDescData = file_aserto_authorizer_v2_authorizer_proto_rawDesc
)

func file_aserto_authorizer_v2_authorizer_proto_rawDescGZIP() []byte {
	file_aserto_authorizer_v2_authorizer_proto_rawDescOnce.Do(func() {
		file_aserto_authorizer_v2_authorizer_proto_rawDescData = protoimpl.X.CompressGZIP(file_aserto_authorizer_v2_authorizer_proto_rawDescData)
	})
	return file_aserto_authorizer_v2_authorizer_proto_rawDescData
}

var file_aserto_authorizer_v2_authorizer_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_aserto_authorizer_v2_authorizer_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_aserto_authorizer_v2_authorizer_proto_goTypes = []interface{}{
	(PathSeparator)(0),           // 0: aserto.authorizer.v2.PathSeparator
	(TraceLevel)(0),              // 1: aserto.authorizer.v2.TraceLevel
	(*DecisionTreeRequest)(nil),  // 2: aserto.authorizer.v2.DecisionTreeRequest
	(*DecisionTreeOptions)(nil),  // 3: aserto.authorizer.v2.DecisionTreeOptions
	(*DecisionTreeResponse)(nil), // 4: aserto.authorizer.v2.DecisionTreeResponse
	(*IsRequest)(nil),            // 5: aserto.authorizer.v2.IsRequest
	(*Decision)(nil),             // 6: aserto.authorizer.v2.Decision
	(*IsResponse)(nil),           // 7: aserto.authorizer.v2.IsResponse
	(*v1.PolicyContext)(nil),     // 8: aserto.api.v1.PolicyContext
	(*v1.IdentityContext)(nil),   // 9: aserto.api.v1.IdentityContext
	(*structpb.Struct)(nil),      // 10: google.protobuf.Struct
}
var file_aserto_authorizer_v2_authorizer_proto_depIdxs = []int32{
	8,  // 0: aserto.authorizer.v2.DecisionTreeRequest.policy_context:type_name -> aserto.api.v1.PolicyContext
	9,  // 1: aserto.authorizer.v2.DecisionTreeRequest.identity_context:type_name -> aserto.api.v1.IdentityContext
	3,  // 2: aserto.authorizer.v2.DecisionTreeRequest.options:type_name -> aserto.authorizer.v2.DecisionTreeOptions
	10, // 3: aserto.authorizer.v2.DecisionTreeRequest.resource_context:type_name -> google.protobuf.Struct
	0,  // 4: aserto.authorizer.v2.DecisionTreeOptions.path_separator:type_name -> aserto.authorizer.v2.PathSeparator
	10, // 5: aserto.authorizer.v2.DecisionTreeResponse.path:type_name -> google.protobuf.Struct
	8,  // 6: aserto.authorizer.v2.IsRequest.policy_context:type_name -> aserto.api.v1.PolicyContext
	9,  // 7: aserto.authorizer.v2.IsRequest.identity_context:type_name -> aserto.api.v1.IdentityContext
	10, // 8: aserto.authorizer.v2.IsRequest.resource_context:type_name -> google.protobuf.Struct
	6,  // 9: aserto.authorizer.v2.IsResponse.decisions:type_name -> aserto.authorizer.v2.Decision
	2,  // 10: aserto.authorizer.v2.Authorizer.DecisionTree:input_type -> aserto.authorizer.v2.DecisionTreeRequest
	5,  // 11: aserto.authorizer.v2.Authorizer.Is:input_type -> aserto.authorizer.v2.IsRequest
	4,  // 12: aserto.authorizer.v2.Authorizer.DecisionTree:output_type -> aserto.authorizer.v2.DecisionTreeResponse
	7,  // 13: aserto.authorizer.v2.Authorizer.Is:output_type -> aserto.authorizer.v2.IsResponse
	12, // [12:14] is the sub-list for method output_type
	10, // [10:12] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_aserto_authorizer_v2_authorizer_proto_init() }
func file_aserto_authorizer_v2_authorizer_proto_init() {
	if File_aserto_authorizer_v2_authorizer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aserto_authorizer_v2_authorizer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecisionTreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_authorizer_v2_authorizer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecisionTreeOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_authorizer_v2_authorizer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecisionTreeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_authorizer_v2_authorizer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_authorizer_v2_authorizer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_authorizer_v2_authorizer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aserto_authorizer_v2_authorizer_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aserto_authorizer_v2_authorizer_proto_goTypes,
		DependencyIndexes: file_aserto_authorizer_v2_authorizer_proto_depIdxs,
		EnumInfos:         file_aserto_authorizer_v2_authorizer_proto_enumTypes,
		MessageInfos:      file_aserto_authorizer_v2_authorizer_proto_msgTypes,
	}.Build()
	File_aserto_authorizer_v2_authorizer_proto = out.File
	file_aserto_authorizer_v2_authorizer_proto_rawDesc = nil
	file_aserto_authorizer_v2_authorizer_proto_goTypes = nil
	file_aserto_authorizer_v2_authorizer_proto_depIdxs = nil
}
